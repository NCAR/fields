# fields  is a package for analysis of spatial data written for
# the R software environment .
# Copyright (C) 2018
# University Corporation for Atmospheric Research (UCAR)
# Contact: Douglas Nychka, nychka@ucar.edu,
# National Center for Atmospheric Research, PO Box 3000, Boulder, CO 80307-3000
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with the R software environment if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
# or see http://www.r-project.org/Licenses/GPL-2    
MaternGLS.test <- function(x, y, smoothness = 1.5, 
    init = log(c(1, 0.2, 0.1))) {
    # some simulations within fields to
    # study the variability in estimates of the covariance parameters.
    N <- length(y)
    Tmatrix <- fields.mkpoly(x, 2)
    qr.T <- qr(Tmatrix)
    Q2 <- qr.yq2(qr.T, diag(1, N))
    nu <- smoothness
    
    loglmvn <- function(pars, nu, y, x, d) {
        lsigma = pars[1]
        laRange = pars[2]
        lsig2 = pars[3]
        #  print( pars)
        N <- length(y)
        M <- (exp(lsigma) * Matern(d, range = exp(laRange), smoothness = nu) + 
            exp(lsig2) * diag(N))
        
        X <- fields.mkpoly(x, 2)
        Mi <- solve(M)
        betahat <- solve(t(X) %*% Mi %*% X) %*% t(X) %*% Mi %*% 
            y
        res <- y - X %*% betahat
        cM <- chol(M)
        lLike <- (N/2) * log(2 * pi) - (1/2) * (2 * sum(log(diag(cM)))) - 
            (1/2) * t(res) %*% Mi %*% res
        
        ycept <- -lLike
        
        if ((abs(lsigma) > 20) | (abs(laRange) > 10) | (abs(lsig2) > 
            40)) {
            return(ycept + 1000 * sum(abs(abs(pars) - 100)))
        }
        else {
            return(ycept)
        }
    }
    
    d <- rdist(x, x)
    temp <- optim(init, loglmvn, method = "L-BFGS-B", nu = nu, 
        y = y, x = x, d = d)
    out <- exp(temp$par)
    
    return(list(smoothness = smoothness, pars = out, optim = temp))
}



MaternGLSProfile.test <- function(x, y, smoothness = 1.5, 
    init = log(c(0.05, 1))) {
    # some simulations within fields to
    # study the variability in estimates of the covariance parameters.
    N <- length(y)
    
    nu <- smoothness
    
    loglmvn <- function(pars, nu, y, x, d) {
        llam = pars[1]
        laRange = pars[2]
        # print( pars)
        N <- length(y)
        aRange <- exp(laRange)
        lambda <- exp(llam)
        lLike <- mKrig(x, y, aRange = aRange, Covariance = "Matern", 
            smoothness = nu, lambda = lambda)$lnProfileLike
        ycept <- -lLike
        if ((abs(llam) > 20) | (abs(laRange) > 10)) {
            return(ycept + 1000 * sum(abs(abs(pars) - 100)))
        }
        else {
            return(ycept)
        }
    }
    
    d <- rdist(x, x)
    temp <- optim(init, loglmvn, method = "L-BFGS-B", nu = nu, 
        y = y, x = x, d = d)
    out <- exp(temp$par)
    sigma.MLE <- mKrig(x, y, aRange = out[2], Covariance = "Matern", 
        smoothness = nu, lambda = out[1])$sigma.MLE
    tau2.MLE <- out[1] * sigma.MLE
    return(list(smoothness = smoothness, pars = c(sigma.MLE, out[2], 
        tau2.MLE), optim = temp))
}

MaternQR.test <- function(x, y, smoothness = 1.5, 
    init = log(c(1, 0.2, 0.1))) {
    # some simulations within fields to
    # study the variability in estimates of the covariance parameters.
    nu <- smoothness
    
    loglmvn <- function(pars, nu, x, y) {
        N <- length(y)
        Tmatrix <- fields.mkpoly(x, 2)
        qr.T <- qr(Tmatrix)
        Q2 <- qr.yq2(qr.T, diag(1, N))
        ys <- t(Q2) %*% y
        N2 <- length(ys)
        lsigma = pars[1]
        laRange = pars[2]
        lsig2 = pars[3]
        d <- rdist(x, x)
        
        A <- (exp(lsigma)*Matern(d, range = exp(laRange), 
            smoothness = nu) + exp(lsig2) * diag(N))
        A <- t(Q2) %*% A %*% Q2
        A <- chol(A)
        w = backsolve(A, ys, transpose = TRUE)
        ycept <- (N2/2) * log(2 * pi) + sum(log(diag(A))) + (1/2) * 
            t(w) %*% w
        
        if ((abs(lsigma) > 100) | (abs(laRange) > 100) | (abs(laRange) > 
            100)) {
            return(ycept + 1000 * sum(abs(abs(pars) - 100)))
        }
        else {
            return(ycept)
        }
    }
    
    
    temp <- optim(init, loglmvn, method = "L-BFGS-B", nu = nu, 
        x = x, y = y)
    out <- exp(temp$par)
    llike <- loglmvn(temp$par, nu, x, y)
    return(list(smoothness = smoothness, pars = out, llike = llike, 
        optim = temp))
}


MaternQRProfile.test <- function(x, y, smoothness = 1.5, 
    init = log(c(1))) {
    # some simulations within fields to
    # study the variability in estimates of the covariance parameters.
    nu <- smoothness
    loglmvn <- function(pars, nu, x, y) {
        laRange = pars[1]
        # print( exp(laRange))
        ycept <- Krig(x, y, Covariance = "Matern", aRange = exp(laRange), 
            smoothness = nu, method = "REML")$lambda.est[6, 5]
        #        print( c(exp(laRange),ycept))
        if ((abs(laRange) > 100)) {
            return(ycept + 1000 * sum(abs(abs(pars) - 100)))
        }
        else {
            return(ycept)
        }
    }
    
    temp <- optim(init, loglmvn, method = "L-BFGS-B", nu = nu, 
        x = x, y = y)
    aRange.est <- exp(temp$par[1])
    out2 <- Krig(x, y, Covariance = "Matern", aRange = aRange.est, 
        smoothness = nu, method = "REML")
    # MLE based on reduced degrees of freedom:
    
    offset <- (out2$N/(out2$N - 3))
    
    out3 <- c(out2$sigma.MLE * offset, aRange.est, out2$tauHat.MLE^2 * 
        offset)
    
    return(list(obj = out2, smoothness = smoothness, pars = out3, 
        trA = out2$eff.df, optim = temp))
}

# this function has correct formula for REML likelihood
REML.test <- function(x, y, sigma, tau2, aRange, nu = 1.5) {
    Tmatrix <- fields.mkpoly(x, 2)
    qr.T <- qr(Tmatrix)
    N <- length(y)
    Q2 <- qr.yq2(qr.T, diag(1, N))
    ys <- t(Q2) %*% y
    N2 <- length(ys)
    A <- (sigma * Matern(rdist(x, x), range = aRange, smoothness = nu) + 
        tau2 * diag(1, N))
    A <- t(Q2) %*% A %*% Q2
    Ac <- chol(A)
    w <- backsolve(Ac, ys, transpose = TRUE)
    REML.like <- (N2/2) * log(2 * pi) + (1/2) * 2 * sum(log(diag(Ac))) + 
        (1/2) * t(w) %*% w
    REML.like <- -1 * REML.like
    ccoef <- sigma * Q2 %*% solve(A) %*% ys
    return(list(REML.like = REML.like, A = A, ccoef = ccoef, 
        quad.form = t(w) %*% w, sigmahat = (t(w) %*% w/N2) * sigma, 
        det = 2 * sum(log(diag(Ac))), N2 = N2))
}


