matplot( sGrid, X, type="l")
title("basis functions")
image.plot( 1:8,1:8, Omega)
title("covariance for coefficients")
covG<- X%*%Omega%*%t(X)
image.plot(sGrid, sGrid,  covG, col=viridis(256) )
title("process covariance matrix")
locs<- c( 10, 20, 50, 85)
matplot( sGrid, covG[,locs], type="l", lty=1)
xline( sGrid[locs], col="grey30", lwd=2)
title("some slices of Omega")
set.seed(2232)
B<- chol( Omega)
c<- t(B)%*%rnorm( 8)
g1<- X%*%c
fields.style()
plot( sGrid, g1, type="l")
c<- t(B)%*%rnorm( 8)
g2<- X%*%c
c<- t(B)%*%rnorm( 8)
g3<- X%*%c
matplot( sGrid, cbind( g1,g2,g3), type="l",
lty=1, lwd=3, xlab="s", ylab= "g(s)")
#knot locations
xline( u, lwd=.5)
Q<- solve( Omega)
par( pty="s")
image.plot( u, u, Omega, col=viridis(256))
title("Covariance matrix Omega")
image.plot( u, u, Q, col=viridis(256))
title("precision matrix for Omega")
M<- 400
set.seed(2232)
B<- chol( Omega)
bigU<- matrix(rnorm( 8*M), 8,M )
c<- t(B)%*%bigU
gSim<- X%*%c
look<- apply( gSim, 2, "max")
hist(look)
qnorm( look)
qqnorm(look)
M<-1000
bigU<- matrix(rnorm( 8*M), 8,M )
bigU<- matrix(rnorm( 8*M), 8,M )
c<- t(B)%*%bigU
gSim<- X%*%c
look<- apply( gSim, 2, "max")
hist( look)
LKrig.diag
LKrigDiag
library( LatticeKrig)
LKDiag
B<- LKrig.diag( c( -1,4,-1), 15, full=TRUE)
print( B)
B<- LKDiag( c( -1,4,-1), 15, full=TRUE)
print( B)
B<- LKDiag( c( -1,4,-1), 10, full=TRUE)
print( B)
Q<- t( B) %*% B
Omega<- solve( Q)
diag( Q)
diag( Omega)
Q<- t( B) %*% B
print( Q)
matplot( 1:10, Omega, type="p", pch=16, col=1:4)
matplot( 1:10, Omega, type="l", pch=16, col=1:2)
matplot( 1:10, Omega, type="b", pch=16, col=1:2)
LKInfo<- LKrigSetup( 1:100, nlevel=1, a.wght=4)
Q<- LKrig.precision(LKinfo)
Q<- LKrig.precision(LKInfo)
LKInfo<- LKrigSetup( 1:100, nlevel=1, a.wght=4)
Q<- LKrig.precision(LKInfo)
sDomain<- cbind( c(1,40), c( 1,40))
LKInfo<- LKrigSetup( sDomain, NC= 40,  nlevel=1, a.wght=4)
LKInfo<- LKrigSetup( sDomain, NC= 40,  nlevel=1, a.wght=4.5)
LKInfo
LKInfo<- LKrigSetup( sDomain, NC= 40, NC.buffer=0,  nlevel=1, a.wght=4.5)
LKInfo$latticeInfo
sDomain<- cbind( c(1,40), c( 1,40))
LKInfo<- LKrigSetup( sDomain, NC= 40, NC.buffer=0,  nlevel=1, a.wght=4.5)
Q<- LKrig.precision(LKInfo)
image.plot( spam2full(Q))
sDomain<- cbind( c(0,1), c( 0,1))
LKInfo<- LKrigSetup( sDomain, NC= 25, NC.buffer=0,  nlevel=1, a.wght=4.5)
Qsparse<- LKrig.precision(LKInfo)
Q<- spam2full( Qsparse)
dim( Q)
stats( diag( Q))
sDomain<- cbind( c(0,1), c( 0,1))
LKInfo<- LKrigSetup( sDomain, NC= 20, NC.buffer=0,  nlevel=1, a.wght=4.5)
Qsparse<- LKrig.precision(LKInfo)
Q<- spam2full( Qsparse)
image.plot(1:20, 1:20, Q, col=viridis(256))
sDomain<- cbind( c(0,1), c( 0,1))
LKInfo<- LKrigSetup( sDomain, NC= 20, NC.buffer=0,  nlevel=1, a.wght=4.5)
Qsparse<- LKrig.precision(LKInfo)
Q<- spam2full( Qsparse)
image.plot(1:20, 1:20, Q, col=viridis(256))
sDomain<- cbind( c(0,1), c( 0,1))
LKInfo<- LKrigSetup( sDomain, NC= 20, NC.buffer=0,  nlevel=1, a.wght=4.5)
Qsparse<- LKrig.precision(LKInfo)
Q<- spam2full( Qsparse)
image.plot( Q, col=viridis(256))
image.plot( matrix( Q[,155], 20,20))
image.plot( matrix( Q[,155], 20,20))
Omega<- solve( Q)
image.plot( matrix( Omega[,155], 20,20))
image.plot( matrix( Omega[,155], 20,20))
LKrig.sim
set.seed(123)
look <-  sim.LKrig( LKinfo=LKInfo, M=4 just.coefficients=TRUE )
set.seed(123)
look <-  sim.LKrig( LKinfo=LKInfo, M=4 ,just.coefficients=TRUE )
set.seed(123)
look <-  LKrig.sim( LKinfo=LKInfo, M=4 ,just.coefficients=TRUE )
dim( look)
set.seed(123)
look <-  LKrig.sim( LKinfo=LKInfo, M=4 ,just.coefficients=TRUE )
# take a look
set.panel( 2,2)
for ( k in 1:4){
image.plot( matrix( look[,k], 20,20))
}
image.plot( 1:20, 1:20, matrix( diag( Omega),20,20))
image.plot( 1:20, 1:20, matrix( diag( Omega),20,20)/max( Omega) )
fields.style()
Q<- t( B) %*% B
print( Q)
Omega<- solve( Q)
matplot( 1:10, Omega, type="l", col=1:2)
title("slices of the covariance matrix")
fields.style()
Q<- t( B) %*% B
print( Q)
Omega<- solve( Q)
matplot( 1:10, Omega, type="l", col=1:2, lty=1:2)
title("slices of the covariance matrix")
seq( mdy( "01/15/2015") , mdy( "07/25/2015"), by="day")
library(lubridate)
seq( mdy( "01/15/2015") , mdy( "07/25/2015"), by="day")
date1<- sample( allDa)
allDates<- seq( mdy( "01/15/2015") , mdy( "07/25/2015"), by="day")
date1<- sample( allDates, 50)
date1
Date1<- sample( allDates, 50)
rowIndex<- match( Date1, allDates)
rowIndex
library( fields)
data(ozone2)
s<- ozone2$lon.lat
y<- ozone2$y[16,]
s<- ozone2$lon.lat
y<- ozone2$y[16,]
obj<- spatialProcess( s,y)
obj
vObj<- vgram( s,y, N= 15)
names( vObj)
plot( vObj)
obj<- spatialProcess( s,y, mKrig.args= list( m=1) )
vFit<- obj$summary["tau"]^2 +
obj$summary["sigma2"]( 1- Matern( dGrid/obj$summary["aRange"],
smoothness=1.0 )
)
vFit<- obj$summary["tau"]^2 +
obj$summary["sigma2"]*( 1- Matern( dGrid/obj$summary["aRange"],
smoothness=1.0 )
)
dGrid<- seq( 0, 10, length.out=150)
vFit<- obj$summary["tau"]^2 +
obj$summary["sigma2"]*( 1- Matern( dGrid/obj$summary["aRange"],
smoothness=1.0 )
)
lines( dGrid, vFit, col="orange3")
names( vObj)
vObj$stats
g<- sim.spatialProcess( obj)
g<- sim.spatialProcess( obj, x)
args( sim.spatialProcess)
g<- sim.spatialProcess( obj, xp=x)
g<- sim.spatialProcess( obj, s)
bubblePlot(s, g)
g<- sim.spatialProcess( obj, s)
bubblePlot(s, g)
g<- sim.spatialProcess( obj, s)
bubblePlot(s, g)
sim.spatialProcess
help( "sim.spatialProcess")
g<- simSpatialData( obj, s)
simSpatialData
ySim<- simSpatialData( obj)
bubblePlot( ySim)
bubblePlot( s,ySim)
vObj$stats
set.seed(222)
for( k in 1:10){
ySim<- simSpatialData( obj)
vTemp<- vgram( s,y, N= 15)
vTest<- cbind( vTest, c(vTemp$stats[2,]) )
}
vTest<- NULL
set.seed(222)
for( k in 1:10){
ySim<- simSpatialData( obj)
vTemp<- vgram( s,y, N= 15)
vTest<- cbind( vTest, c(vTemp$stats[2,]) )
}
matplot(vObj$centers, vTest, type="b", lty=1, col="grey" )
simSpatialData
vTest<- NULL
set.seed(222)
for( k in 1:10){
ySim<- simSpatialData( obj)
vTemp<- vgram( s,ySim, N= 15)
vTest<- cbind( vTest, c(vTemp$stats[2,]) )
}
matplot(vObj$centers, vTest, type="b", lty=1, col="grey" )
for( k in 1:10){
ySim<- simSpatialData( obj)
vTemp<- vgram( s,ySim, N= 15)
vTest<- cbind( vTest, c(vTemp$stats[2,]) )
}
k<- 1
ySim<- simSpatialData( obj)
vTemp<- vgram( s, ySim, N= 15)
ySim
vTest<- NULL
set.seed(222)
for( k in 1:10){
ySim<- simSpatialData( obj)
vTemp<- vgram( s, c(ySim), N= 15)
vTest<- cbind( vTest, c(vTemp$stats[2,]) )
}
s<- ozone2$lon.lat
y<- ozone2$y[16,]
# omit missing values to make the simulation below easier
ind<- !is.na(y)
s<- s[ind,]
y<- y[ind,]
# only take out a constant in the fixed part of model
obj<- spatialProcess( s,y, mKrig.args= list( m=1) )
vObj<- vgram( s,y, N= 15)
# add fitted variogram from spatialProcess
dGrid<- seq( 0, 10, length.out=150)
vFit<- obj$summary["tau"]^2 +
obj$summary["sigma2"]*( 1- Matern( dGrid/obj$summary["aRange"],
smoothness=1.0 )
)
lines( dGrid, vFit, col="orange3", lwd=2)
# now simulate data from the fitted model and examine variability in
# the variograms
vTest<- NULL
set.seed(222)
for( k in 1:10){
ySim<- simSpatialData( obj)
vTemp<- vgram( s, ySim, N= 15)
vTest<- cbind( vTest, c(vTemp$stats[2,]) )
}
matplot(vObj$centers, vTest, type="b", lty=1, col="grey" )
matplot(vObj$centers, vTest, type="b", lty=1, col="grey", pch=16 )
lines( dGrid, vFit, col="orange3", lwd=2)
set.seed(222)
for( k in 1:10){
ySim<- simSpatialData( obj)
vTemp<- vgram( s, ySim, N= 15)
vTest<- cbind( vTest, c(vTemp$stats[2,]) )
objTest- spatialProcess( s,y, mKrig.args= list( m=1) )
vFitTest<- objTest$summary["tau"]^2 +
objTest$summary["sigma2"]*( 1- Matern( dGrid/objTest$summary["aRange"],
smoothness=1.0 )
)
MLETest<- cbind( MLETest, vFitTest)
}
for( k in 1:10){
ySim<- simSpatialData( obj)
vTemp<- vgram( s, ySim, N= 15)
vTest<- cbind( vTest, c(vTemp$stats[2,]) )
objTest- spatialProcess( s,ySim, mKrig.args= list( m=1) )
vFitTest<- objTest$summary["tau"]^2 +
objTest$summary["sigma2"]*( 1- Matern( dGrid/objTest$summary["aRange"],
smoothness=1.0 )
)
MLETest<- cbind( MLETest, vFitTest)
}
ySim<- simSpatialData( obj)
vTemp<- vgram( s, ySim, N= 15)
vTest<- cbind( vTest, c(vTemp$stats[2,]) )
objTest- spatialProcess( s,ySim, mKrig.args= list( m=1) )
set.seed(222)
for( k in 1:10){
ySim<- simSpatialData( obj)
vTemp<- vgram( s, ySim, N= 15)
vTest<- cbind( vTest, c(vTemp$stats[2,]) )
objTest <- spatialProcess( s,ySim, mKrig.args= list( m=1) )
vFitTest<- objTest$summary["tau"]^2 +
objTest$summary["sigma2"]*( 1- Matern( dGrid/objTest$summary["aRange"],
smoothness=1.0 )
)
MLETest<- cbind( MLETest, vFitTest)
}
vTest<- NULL
MLETest<- NULL
set.seed(222)
for( k in 1:10){
ySim<- simSpatialData( obj)
vTemp<- vgram( s, ySim, N= 15)
vTest<- cbind( vTest, c(vTemp$stats[2,]) )
objTest <- spatialProcess( s,ySim, mKrig.args= list( m=1) )
vFitTest<- objTest$summary["tau"]^2 +
objTest$summary["sigma2"]*( 1- Matern( dGrid/objTest$summary["aRange"],
smoothness=1.0 )
)
MLETest<- cbind( MLETest, vFitTest)
}
matplot(vObj$centers, vTest, type="b", lty=1, col="grey", pch=16 )
matlines( dGrid, MLETest, col="magenta")
lines( dGrid, vFit, col="black", lwd=2)
MLETest<- NULL
set.seed(222)
for( k in 1:10){
ySim<- simSpatialData( obj)
vTemp<- vgram( s, ySim, N= 15)
vTest<- cbind( vTest, c(vTemp$stats[2,]) )
objTest <- spatialProcess( s,ySim, mKrig.args= list( m=1) )
vFitTest<- objTest$summary["tau"]^2 +
objTest$summary["sigma2"]*( 1- Matern( dGrid/objTest$summary["aRange"],
smoothness=1.0 )
)
MLETest<- cbind( MLETest, vFitTest)
}
dim( vFit)
set.seed(222)
for( k in 1:10){
ySim<- simSpatialData( obj)
vTemp<- vgram( s, ySim, N= 15)
vTest<- cbind( vTest, c(vTemp$stats[2,]) )
objTest <- spatialProcess( s,ySim, mKrig.args= list( m=1) )
vFitTest<- objTest$summary["tau"]^2 +
objTest$summary["sigma2"]*( 1- Matern( dGrid/objTest$summary["aRange"],
smoothness=1.0 )
)
MLETest<- cbind( MLETest, vFitTest)
}
matplot(vObj$centers, vTest, type="b", lty=1, col="grey", pch=16 )
matlines( dGrid, MLETest, col="magenta")
lines( dGrid, vFitTest, col="black", lwd=2)
dim( MLETest)
MLETest
matplot( MLETest)
dGrid<- seq( 0, 10, length.out=50)
vTest<- NULL
MLETest<- NULL
set.seed(222)
for( k in 1:10){
cat( k, " ")
ySim<- simSpatialData( obj)
vTemp<- vgram( s, ySim, N= 15)
vTest<- cbind( vTest, c(vTemp$stats[2,]) )
objTest <- spatialProcess( s,ySim, mKrig.args= list( m=1) )
vFitTest<- objTest$summary["tau"]^2 +
objTest$summary["sigma2"]*( 1- Matern( dGrid/objTest$summary["aRange"],
smoothness=1.0 )
)
MLETest<- cbind( MLETest, vFitTest)
}
matplot(vObj$centers, vTest, type="b", lty=1, col="grey", pch=16 )
matlines( dGrid, MLETest, col="magenta")
matlines( dGrid, vFitTest, col="black", lwd=2)
matplot(vObj$centers, vTest, type="b", lty=1, col="grey", pch=16 )
dim( vTest)
vTest
matplot( vTest)
vTest<- NULL
MLETest<- NULL
set.seed(222)
for( k in 1:10){
cat( k, " ")
ySim<- simSpatialData( obj)
vTemp<- vgram( s, ySim, N= 15)
vTest<- cbind( vTest, c(vTemp$stats[2,]) )
objTest <- spatialProcess( s,ySim, mKrig.args= list( m=1) )
vFitTest<- objTest$summary["tau"]^2 +
objTest$summary["sigma2"]*( 1- Matern( dGrid/objTest$summary["aRange"],
smoothness=1.0 )
)
MLETest<- cbind( MLETest, vFitTest)
}
matplot( vTest)
vTest
simSpatialData
vTest<- NULL
MLETest<- NULL
set.seed(222)
ySim<- simSpatialData( obj, M=10)
for( k in 1:10){
cat( k, " ")
vTemp<- vgram( s, ySim[,k], N= 15)
vTest<- cbind( vTest, c(vTemp$stats[2,]) )
objTest <- spatialProcess( s,ySim[,k], mKrig.args= list( m=1) )
vFitTest<- objTest$summary["tau"]^2 +
objTest$summary["sigma2"]*( 1- Matern( dGrid/objTest$summary["aRange"],
smoothness=1.0 )
)
MLETest<- cbind( MLETest, vFitTest)
}
matplot(vObj$centers, vTest, type="b", lty=1, col="grey", pch=16 )
matlines( dGrid, MLETest, col="magenta")
matlines( dGrid, vFit, col="black", lwd=2)
matlines( dGrid, vFit, col="black", lwd=2)
library( fields)
data(ozone2)
s<- ozone2$lon.lat
y<- ozone2$y[16,]
# omit missing values to make the simulation below easier
ind<- !is.na(y)
s<- s[ind,]
y<- y[ind,]
# only take out a constant in the fixed part of model
obj<- spatialProcess( s,y, mKrig.args= list( m=1) )
vObj<- vgram( s,y, N= 15)
# add fitted variogram from spatialProcess
dGrid<- seq( 0, 10, length.out=50)
vFit<- obj$summary["tau"]^2 +
obj$summary["sigma2"]*( 1- Matern( dGrid/obj$summary["aRange"],
smoothness=1.0 )
)
lines( dGrid, vFit, col="orange3", lwd=2)
# now simulate data from the fitted model and examine variability in
# the variograms
vTest<- NULL
MLETest<- NULL
set.seed(222)
ySim<- simSpatialData( obj, M=10)
for( k in 1:10){
cat( k, " ")
vTemp<- vgram( s, ySim[,k], N= 15)
vTest<- cbind( vTest, c(vTemp$stats[2,]) )
objTest <- spatialProcess( s,ySim[,k], mKrig.args= list( m=1) )
vFitTest<- objTest$summary["tau"]^2 +
objTest$summary["sigma2"]*( 1- Matern( dGrid/objTest$summary["aRange"],
smoothness=1.0 )
)
MLETest<- cbind( MLETest, vFitTest)
}
matplot(vObj$centers, vTest, type="b", lty=1, col="grey", pch=16 )
matlines( dGrid, MLETest, col="magenta")
matlines( dGrid, vFit, col="black", lwd=2)
vTest<- NULL
MLETest<- NULL
set.seed(222)
ySim<- simSpatialData( obj, M=20)
for( k in 1:20){
cat( k, " ")
vTemp<- vgram( s, ySim[,k], N= 15)
vTest<- cbind( vTest, c(vTemp$stats[2,]) )
objTest <- spatialProcess( s,ySim[,k], mKrig.args= list( m=1) )
vFitTest<- objTest$summary["tau"]^2 +
objTest$summary["sigma2"]*( 1- Matern( dGrid/objTest$summary["aRange"],
smoothness=1.0 )
)
MLETest<- cbind( MLETest, vFitTest)
}
matplot(vObj$centers, vTest, type="b", lty=1, col="grey", pch=16 )
matlines( dGrid, MLETest, col="magenta")
matlines( dGrid, vFit, col="black", lwd=2)
matplot(vObj$centers[1:5], vTest[1:5], type="b", lty=1, col="grey", pch=16 )
matlines( dGrid, MLETest, col="magenta")
matlines( dGrid, vFit, col="black", lwd=2)
matplot(vObj$centers, vTest, type="b", lty=1, col="grey", pch=16 )
matlines( dGrid, MLETest, col="magenta")
matlines( dGrid, vFit, col="black", lwd=2)
matplot(vObj$centers, vTest, type="b", lty=1, col="grey", pch=16,
xlim=c(0,3), ylim=c(0,2000))
matlines( dGrid, MLETest, col="magenta")
matlines( dGrid, vFit, col="black", lwd=2)
matplot(vObj$centers, vTest, type="b", lty=1, col="grey", pch=16,
xlim=c(0,3), ylim=c(0,2000), log="y")
matlines( dGrid, MLETest, col="magenta", lty=1)
matlines( dGrid, vFit, col="black", lwd=2)
matplot(vObj$centers, vTest, type="b", lty=1, col="grey", pch=16,
xlim=c(0,3), ylim=c(0,2000))
matlines( dGrid, MLETest, col="magenta", lty=1)
matlines( dGrid, vFit, col="black", lwd=2)
matplot(vObj$centers, vTest, type="b", lty=1, col="grey", pch=16,
xlim=c(0,4), ylim=c(0,2000))
matlines( dGrid, MLETest, col="magenta", lty=1)
matlines( dGrid, vFit, col="black", lwd=2)
matplot(vObj$centers, vTest, type="b", lty=1, col="grey", pch=16,
xlim=c(0,4), ylim=c(0,2000))
matlines( dGrid, MLETest, col=alpha("magenta".5), lty=1)
matlines( dGrid, vFit, col="black", lwd=2)
library( scales)
matplot(vObj$centers, vTest, type="b", lty=1, col="grey", pch=16 )
matlines( dGrid, MLETest, col="magenta")
matlines( dGrid, vFit, col="black", lwd=2)
library( scales)
matplot(vObj$centers, vTest, type="b", lty=1, col="grey", pch=16 )
matlines( dGrid, MLETest, col="magenta", lty=1)
lines( dGrid, vFit, col="black", lwd=2)
library( scales)
matplot(vObj$centers, vTest, type="b", lty=1, col="grey", pch=16 )
matlines( dGrid, MLETest, col=alpha("magenta".5), lty=1)
lines( dGrid, vFit, col="black", lwd=2)
matplot(vObj$centers, vTest, type="b", lty=1, col="grey", pch=16,
xlim=c(0,4), ylim=c(0,2000))
matlines( dGrid, MLETest, col=alpha("magenta".5), lty=1)
matlines( dGrid, vFit, col="black", lwd=2)
matplot(vObj$centers, vTest, type="b", lty=1, col="grey", pch=16,
xlim=c(0,4), ylim=c(0,2000))
matlines( dGrid, MLETest, col=alpha("magenta",.5), lty=1)
matlines( dGrid, vFit, col="black", lwd=2)
setwd("~/Dropbox/Home/Repositories/fields/fields/R")
dir()
