as.matrix(MLEfit1B$summary[,tempCol]),
tag="grid search with and w/o profile")
par.grid<- list( lambda = c(.999, 1.0, 1.001)*MLEfit0$summary["lambda"],
aRange  =  rep(MLEfit0$summary["aRange"] ,3 ) )
MLEfit2 <- mKrigMLEGrid(x, y,
cov.function  = "stationary.cov",
cov.args  = list(Covariance = "Matern",
smoothness = 1.0),
mKrig.args = list( m=1),
par.grid = par.grid,
verbose = FALSE)
hold<- (MLEfit2$summary[1,"lnProfileLike.FULL"] < MLEfit2$summary[2,"lnProfileLike.FULL"]) &
(MLEfit2$summary[3,"lnProfileLike.FULL"] < MLEfit2$summary[2,"lnProfileLike.FULL"])
test.for.zero(as.numeric(hold), 1, relative=FALSE, tag="crude test of maxmimum")
#MLEfit3<- MLESpatialProcess( x,y,
#                             cov.args  = list(Covariance = "Matern",
#                                             smoothness = 1.0),
#                            mKrig.args = list( m=1),
#                            cov.params.start = list( lambda =.2, aRange = NA)
#                            )
MLEfit3<- spatialProcess( x,y,
cov.args  = list(Covariance = "Matern",
smoothness = 1.0),
mKrig.args = list( m=1),
cov.params.start = list( lambda =.2)
)
test.for.zero(MLEfit0$summary[1:5]/
(MLEfit3$summary[1:5]), 1, tol=2e-3,
tag="Testing MLE from spatialProcess ")
######### making sure spatialProcess uses parameter information correctly
obj<- spatialProcess( x, y, mKrig.args= list(m = 1),
lambda= MLEfit0$summary["lambda"],
aRange = MLEfit0$summary["aRange"]
)
obj1<- spatialProcess( x, y, mKrig.args= list(m = 1),
)
test.for.zero(MLEfit0$summary[1],
obj$summary["lnProfileLike.FULL"],
tag="spatialProcess finding MLE " )
test.for.zero(MLEfit0$summary[1],
obj1$summary["lnProfileLike.FULL"], tol=5e-8,
tag="spatialProcess given MLE "
)
# testing Krig function
#out1<- Krig( x,y,  cov.fun="stationary.cov",
#            cov.args = list(Covariance = "Matern",
#                            smoothness=1.0, aRange=.9),
#           na.rm=TRUE,
#              m=2)
genCovMat = function(x, aRange, lambda) {
distanceMatrix<- rdist(x,x)
Sigma<- Matern( distanceMatrix/aRange, smoothness=1.0 )
+ diag(x=lambda, nrow=nrow(distanceMatrix))
return(Sigma)
}
#generate observation locations
set.seed( 22)
n=100
x = matrix(runif(2*n), nrow=n)
#generate observations at the locations
trueARange = .1
trueLambda = .1
distanceMatrix<- rdist(x,x)
Sigma<- Matern( distanceMatrix/trueARange, smoothness=1.0 )
U = chol(Sigma)
M<- 1e5 # lots of replicated fields.
set.seed( 332)
y = t(U)%*%matrix( rnorm(n*M), n,M) +
sqrt(trueLambda)*matrix( rnorm(n*M), n,M)
out<- mKrig( x,y, lambda=trueLambda, aRange=trueARange,
cov.function ="stationary.cov",cov.args = list(Covariance = "Matern",
smoothness=1.0)
)
optim.args = list(method = "BFGS",
control = list(fnscale = -1, parscale = c(0.5, 0.5),
ndeps = c(0.05,0.05)))
MLEfitA <- mKrigMLEJoint(x, y,
cov.params.start= list(aRange=.2, lambda=.01),
cov.function="stationary.cov",
optim.args=optim.args,
cov.args = list(Covariance = "Matern",
smoothness=1.0),
na.rm=TRUE,
reltol = 1e-7,
mKrig.args = list( m=0),
verbose=FALSE)
cat("Testing mKrigMLEJoint against true values",
fill=TRUE)
test.for.zero( MLEfitA$summary["lambda"],.1, tol=.002)
test.for.zero( MLEfitA$summary["aRange"],.1, tol=.0005)
test.for.zero( MLEfitA$summary["sigma2"], 1.0, tol=.0005)
### now test REML fitting
MLEfitB <- mKrigMLEJoint(x, y,
cov.params.start= list(aRange=.12, lambda=.5),
cov.function="stationary.cov",
optim.args=optim.args,
cov.args = list(Covariance = "Matern",
smoothness=1.0),
na.rm=TRUE,
mKrig.args = list( m=0),
REML=TRUE,
verbose=FALSE)
cat("Testing mKrigMLEJoint  with REML against true values",
fill=TRUE)
test.for.zero( MLEfitB$summary["lambda"],.1, tol=.002)
test.for.zero( MLEfitB$summary["aRange"],.1, tol=.002)
test.for.zero( MLEfitB$summary["sigma2"], 1.0, tol=.001)
cat("Testing mKrigMLEJoint  with REML FALSE  against true values",
fill=TRUE)
MLEfitC <- mKrigMLEJoint(x, y,
cov.params.start= list(aRange=.12, lambda=.5),
cov.function ="stationary.cov",
optim.args=optim.args,
cov.args = list(Covariance = "Matern",
smoothness=1.0),
na.rm=TRUE,
mKrig.args = list( m=2),
REML=FALSE,
verbose=FALSE
)
test.for.zero( MLEfitC$summary["lambda"],  .1, tol=.02)
test.for.zero( MLEfitC$summary[ "aRange"],  .1, tol=.02)
test.for.zero( MLEfitC$summary["sigma2"], 1.0, tol=.002)
cat("all done with mKrigMLEGrid tests", fill=TRUE)
options( echo=TRUE)
options( echo=TRUE)
273 + 185 +184 +94
source('~/Dropbox/Home/Repositories/fields/fields/tests/mKrigMLETest.R')
cat("all done with mKrigMLEGrid tests", fill=TRUE)
options( echo=TRUE)
options( echo=TRUE)
ls()
MLEfit0$summary
MLEfit3$summary[1:5])
MLEfit3$summary[1:5]
test.for.zero(MLEfit0$summary[1:2]/
(MLEfit3$summary[1:2]), 1, tol=2e-3,
tag="Testing MLE from spatialProcess ")
MLEfit0$summary[1:2]/
(MLEfit3$summary[1:2])
test.for.zero(MLEfit0$summary[1:2]/
(MLEfit3$summary[1:2]), 1, tol=1e-5,
tag="Testing MLE from spatialProcess ")
MLEfit0$summary[1]
obj1$summary["lnProfileLike.FULL"]
MLEfit0$summary
obj1$summary
test.for.zero(MLEfit0$summary[1],
obj1$summary["lnProfileLike.FULL"], tol=1e-3,
tag="spatialProcess given MLE "
)
test.for.zero(MLEfit0$summary[1],
obj1$summary["lnProfileLike.FULL"], tol=1e-4,
tag="spatialProcess given MLE "
)
test.for.zero(MLEfit0$summary[1],
obj1$summary["lnProfileLike.FULL"], tol=1e-5,
tag="spatialProcess given MLE "
)
source('~/Dropbox/Home/Repositories/fields/fields/tests/mKrigMLETest.R')
data( ozone2)
obj<- spatialProcess( ozone2$lon.lat,ozone2$y[16,] )
######### boot strap
set.seed(123)
M<- 250
# create M indepedent copies of the observation vector
ySynthetic<- simSpatialData( obj, M)
bootSummary<- NULL
aRangeMLE<- obj$summary["aRange"]
lambdaMLE<- obj$summary["lambda"]
for(  k in 1:M){
cat( k, " " )
# here the MLEs are found using the easy top level level wrapper
# see mKrigMLEJoint for a more efficient strategy
out <- mKrigMLEJoint(obj$x, ySynthetic[,k],
weights = obj$weights,
mKrig.args = obj$mKrig.args,
cov.function = obj$cov.function.name,
cov.args = obj$cov.args,
cov.params.start = list( aRange = aRangeMLE,
lambda = lambdaMLE)
)
newSummary<- out$summary
bootSummary<- rbind( bootSummary, newSummary)
}
obj$summary
stats( bootSummary)
obj2<- mKrigMLEJoint(x,Y,
cov.args=list(Covariance="Matern"),
cov.params.start=list( aRange = .18,
smoothness = 1.1,
lambda = .08),
)
N<- 50
set.seed(123)
x<- matrix(runif(2*N), N,2)
aRange<- .2
Sigma<-  Matern( rdist(x,x)/aRange , smoothness=1.0)
Sigma.5<- chol( Sigma)
tau<- .1
#  250 independent spatial data sets but a common covariance function
#    -- there is little overhead in
#        MLE across independent realizations and a good test of code validity.
M<-250
F.true<- t( Sigma.5) %*% matrix( rnorm(N*M), N,M)
Y<-  F.true +  tau* matrix( rnorm(N*M), N,M)
obj2<- mKrigMLEJoint(x,Y,
cov.args=list(Covariance="Matern"),
cov.params.start=list( aRange = .18,
smoothness = 1.1,
lambda = .08),
)
obj2
obj2$summary
obj3<- mKrigMLEJoint(x,Y,
cov.args=list(Covariance="Matern"),
cov.params.start=list(aRange = .18,
smoothness = 1.1,
lambda = .08),
, REML=TRUE)
obj3$summary
spatialProcess( (x,Y,
cov.args=list(Covariance="Matern"),
cov.params.start=list( aRange = .18,
smoothness = 1.1,
lambda = .08),
)
spatialProcess( (x,Y,
cov.args=list(Covariance="Matern"),
cov.params.start=list( aRange = .18,
smoothness = 1.1,
lambda = .08)
)
spatialProcess(mKrigMLEJoint(x,Y,
cov.args=list(Covariance="Matern"),
cov.params.start=list( aRange = .18,
smoothness = 1.1,
lambda = .08)
)
obj2A<- spatialProcess(x,Y,
cov.args=list(Covariance="Matern"),
cov.params.start=list( aRange = .18,
smoothness = 1.1,
lambda = .08)
)
obj2A
names( obj2A)
obj2$MLEsummary
obj2A$MLEsummary
obj2A$MLEInfo
obj2A$MLEInfo$summary
obj2A$MLESummary
install.packages("~/Dropbox/Home/Repositories/fields/fields_12.0.tar.gz", repos = NULL, type = "source")
library( fields)
help( "spatialProcess")
data(COmonthlyMet)
fit1E<- spatialProcess(CO.loc,CO.tmin.MAM.climate, Z=CO.elev,
gridARange= seq(.25, 2.0, length.out=10)
)
set.panel( 2,2)
plot( fit1E)
# conditional simulation at missing data
notThere<- is.na(CO.tmin.MAM.climate )
xp <- CO.loc[notThere,]
Zp <- CO.elev[notThere]
infill<- sim.spatialProcess( fit1E, xp=xp,
Z= Zp, M= 10)
fit2<- spatialProcess(CO.loc,CO.tmin.MAM.climate,
gridARange= seq(.25, 2.0, length.out=10)
)
gridList <- fields.x.to.grid( fit2$x, nx=50,ny=50)
xGrid<- make.surface.grid( gridList)
ensemble<- sim.spatialProcess( fit2, xp=xGrid, M= 5)
image.plot( as.surface( xGrid, ensemble[1,]))
set.panel()
image.plot( as.surface( xGrid, ensemble[1,]))
data(ozone2)
x<- ozone2$lon.lat
y<- ozone2$y[16,]
# a comparison to using an exponential and Wendland covariance function
# and great circle distance -- just to make range easier to interpret.
obj <- spatialProcess( x, y,
Distance = "rdist.earth")
obj2<- spatialProcess( x, y,
cov.args = list(Covariance = "Exponential"),
Distance = "rdist.earth" )
obj3<- spatialProcess( x, y,
cov.args = list(Covariance = "Wendland",
dimension  = 2,
k = 2),
Distance = "rdist.earth")
rbind( Whittle= obj$summary,
Exp= obj2$summary,
Wendland= obj3$summary
)
set.panel( 3,1)
surface( obj)
US( add=TRUE)
title("Matern sm= 1.0")
surface( obj2)
US( add=TRUE)
title("Matern sm= .5")
surface( obj3)
US( add=TRUE)
title("Wendland k =2")
# prediction standard errors
# these take a while because prediction errors are based
# directly on the Kriging weight matrix
# see mKrig for an alternative.
set.panel( 2,1)
out.p<- predictSurfaceSE( obj, nx=40,ny=40)
surface( out.p)
US( add=TRUE)
title("Matern sm= 1.0")
points( x, col="magenta")
#
out.p<- predictSurfaceSE( obj, nx=40,ny=40)
surface( out.p)
US( add=TRUE)
points( x, col="magenta")
title("Matern sm= .5")
set.panel(1,1)
data(ozone2)
x<- ozone2$lon.lat
y<- ozone2$y[16,]
good<-!is.na(y)
x1<- x[good,]
y1<- y[good]
# spatialProcess takes longer because of grid search on aRange.
obj<- spatialProcess( x1, y1,
mKrig.args = list(m=1),
smoothness = .5)
library( geoR)
ml.n <- likfit(coords= x1, data=y1, ini = c(570, 3), nug = 50)
# compare to
stuffFields<- obj$MLESummary[c("lnProfileLike.FULL",
"aRange","tau","sigma2")]
stuffGeoR<- c( ml.n$loglik, ml.n$phi, sqrt(ml.n$nugget),
ml.n$sigmasq)
test.for.zero(  max(stuffFields/stuffGeoR), 1, tol=.004)
help( "sim.spatialProcess")
data( ozone2)
obj<- spatialProcess( ozone2$lon.lat,ozone2$y[16,] )
######### boot strap
set.seed(123)
M<- 20
# create M indepedent copies of the observation vector
ySynthetic<- simSpatialData( obj, M)
bootSummary<- NULL
for(  k in 1:M){
# here the MLEs are found using the easy top level level wrapper
# see mKrigMLEJoint for a more efficient strategy
newSummary<- spatialProcess(obj$x,ySynthetic[,k],
cov.params.start= list(
aRange = obj$aRange.MLE,
lambda = obj$lambda.MLE
)
)$summary
bootSummary<- rbind( bootSummary, newSummary)
}
obj$aRange.MLE
aHat<- obj$summaryMLE["aRange"]
aHat
data( ozone2)
obj<- spatialProcess( ozone2$lon.lat,ozone2$y[16,] )
obj$summaryMLE["aRange"]
obj$summary
aHat<- obj$summary["aRange"]
bootSummary<- NULL
for(  k in 1:M){
# here the MLEs are found using the easy top level level wrapper
# see mKrigMLEJoint for a more efficient strategy
newSummary<- spatialProcess(obj$x,ySynthetic[,k],
cov.params.start= list(
aRange = aHat,
lambda = lambdaHat)
)$summary
bootSummary<- rbind( bootSummary, newSummary)
}
lambdaHat<- obj$summary["lambda"]
bootSummary<- NULL
for(  k in 1:M){
# here the MLEs are found using the easy top level level wrapper
# see mKrigMLEJoint for a more efficient strategy
newSummary<- spatialProcess(obj$x,ySynthetic[,k],
cov.params.start= list(
aRange = aHat,
lambda = lambdaHat)
)$summary
bootSummary<- rbind( bootSummary, newSummary)
}
stats( bootSummary )
obj$summary
confidenceInterval <- apply(bootSummary[,2:5],2,
quantile, probs=c(0.025,0.975) )
names( obj)
set.seed(123)
M<- 100
# create M indepedent copies of the observation vector
ySynthetic<- simSpatialData( obj, M)
bootSummary<- NULL
for(  k in 1:M){
cat( k, " ")
# here the MLEs are found using the easy top level level wrapper
# see mKrigMLEJoint for a more efficient strategy
newSummary<- spatialProcess(obj$x,ySynthetic[,k],
cov.params.start= list(
aRange = aHat,
lambda = lambdaHat)
)$summary
bootSummary<- rbind( bootSummary, newSummary)
}
cat( fill= TRUE)
stats( bootSummary )
obj$summary
confidenceInterval <- apply(bootSummary[,2:5],2,
quantile, probs=c(0.025,0.975) )
obj$summary[2:5]
print( confidenceInterval)
# compare to confidence interval using large sample theory
print( obj$CITable)
names( bootSummary)
colnames( bootSummary)
confidenceInterval <- apply(bootSummary[,c("lambda", "aRange"")],2,
quantile, probs=c(0.025,0.975) )
# compare to estimates used as the "true" parameters
obj$summary[2:5]
print( confidenceInterval)
tmpBoot<- bootSummary[,c("lambda", "aRange") ]
confidenceInterval <- apply(tmpBoot, 2,
quantile, probs=c(0.025,0.975) )
print( confidenceInterval)
print( obj$CITable)
print( t(confidenceInterval) )
# compare to confidence interval using large sample theory
print( obj$CITable)
library( fields)
data( ozone2)
# x is a two column matrix where each row is a location in lon/lat
# coordinates
x<- ozone2$lon.lat
# y is a vector of ozone measurements at day 16. Note some missing values.
y<- ozone2$y[16,]
# artifically reduce size of data for a quick example to pass CRAN ...
x<- x[1:75,]
y<- y[1:75]
# lots of default choices  made here -- see gridN to increase
# the number of points in grid searches for MLEs
# without specifying  lambda or aRange both are found in a robust
# way uses grid searches
# profiling over lambda is not reuqired but completes the full
# example.  Omit this for a faster computation.
obj<- spatialProcess( x, y, profileLambda=TRUE)
obj<- spatialProcess( x, y, profileLambda=TRUE, profileARange=TRUE)
# summary of model
summary( obj)
obj<- spatialProcess( x, y, profileLambda=TRUE, profileARange=TRUE)
# summary of model
summary( obj)
plot(obj)
set.panel( 2,2)
plot(obj)
names( obj)
obj$CASE
obj<- spatialProcess( x, y, profileLambda=TRUE, profileARange=TRUE)
# summary of model
summary( obj)
spatialProcess
source('~/Dropbox/Home/Repositories/fields/fields/R/spatialProcess.R')
obj<- spatialProcess( x, y, profileLambda=TRUE, profileARange=TRUE)
# summary of model
summary( obj)
names( obj)
obj$InitialGridSearch
surface( obj, xlab="longitude", ylab="latitude")
US( add=TRUE, col="grey", lwd=2)
title("Predicted ozone (in PPB)  June 18, 1987 ")
setwd("~/Dropbox/Home/Repositories/fields/vignette")
library( fields)
data(ozone2)
y<- ozone2$y[16,]
good<- !is.na( y)
y<-y[good]
x<- ozone2$lon.lat[good,]
O3FitMLE<- fastTps( x,y, aRange=1.5 )
O3FitMLE
data(ozone2)
y<- ozone2$y[16,]
good<- !is.na( y)
y<-y[good]
x<- ozone2$lon.lat[good,]
O3Obj<- fastTps( x,y, aRange=1.5 )
grid.list<- fields.x.to.grid( O3Obj$x, nx=100, ny=100)
O3Sim<- sim.fastTps.approx( O3Obj,predictionPointsList=grid.list,M=5)
# controlling the grids
xR<- range( x[,1], na.rm=TRUE)
yR<- range( x[,2], na.rm=TRUE)
simulationGridList<- list( x= seq(xR[1],xR[2],,400), y= seq( yR[1],yR[2], ,400))
# very fine localized prediction grid
O3GridList<- list( x= seq( -90.5,-88.5,,200), y= seq( 38,40,,200))
O3Sim<- sim.fastTps.approx( O3Obj, M=5, predictionPointsList=O3GridList, simulationGridList = simulationGridList)
ls( pos=2)
O3Sim<- sim.mKrig.approx( O3Obj, M=5, predictionPointsList=O3GridList, simulationGridList = simulationGridList)
plot( O3Obj$x, main="Simulation 1",xlab="",ylab="")
US( add=TRUE)
image.plot( as.surface( O3GridList,O3Sim$Ensemble[,2] ), add=TRUE,smallplot= c(.94,.96,0.2,.8),zlim=c(15,140))
points( O3Obj$x, pch=16, col="magenta")
plot( O3Obj$x, main="Simulation 2 (same z-scale)",xlab="",ylab="")
US( add=TRUE)
image( as.surface( O3GridList,O3Sim$Ensemble[,1] ), add=TRUE,zlim=c(15,140),col=tim.colors())
points( O3Obj$x, pch=16, col="magenta")
warnings()
