
# fields  is a package for analysis of spatial data written for
# the R software environment .
# Copyright (C) 2018
# University Corporation for Atmospheric Research (UCAR)
# Contact: Douglas Nychka, nychka@ucar.edu,
# National Center for Atmospheric Research, PO Box 3000, Boulder, CO 80307-3000
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with the R software environment if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
# or see http://www.r-project.org/Licenses/GPL-2    

MLEProfile <- function(x, y, weights = rep(1, nrow(x)), Z = NULL,
                            mKrig.args = NULL,
                            cov.function, 
                            cov.args=NULL,
                             parGrid = NULL,
                                 gridN = 15,
                            optim.args = NULL,
                                 na.rm = TRUE,
                               verbose = FALSE,
                               abstol  = 1e-4,
                                  REML = FALSE,
                      cov.params.start = NULL
                               ) {
  ########################################################################
  # evaluate likelihood for a  parameter grid 
  # maximizing over other parameters. 
  #########################################################################
  cov.params.startTemp <-  cov.params.start 
  cov.params.startTemp$aRange<- NULL
  
  timeGrid<- system.time(
  ProfileInfo<- mKrigMLEGrid(x, y,  
                         weights = weights, Z= Z, 
                      mKrig.args = mKrig.args,
                         cov.function = cov.function, 
                       cov.args  = cov.args,
                        par.grid = parGrid, 
                           na.rm = na.rm,
                         verbose = verbose,
                            REML = REML,
                cov.params.start = cov.params.startTemp)
  )
  if( verbose){
    cat("mKrigMLEGrid summary", fill=TRUE)
     print(ProfileInfo$summary)
  }
  #######################################################################
  # refine MLE for lambda and aRange use the best value  from grid 
  # search if starting value not passed. 
  ########################################################################
  
    ind<- which.max( ProfileInfo$summary[,"lnProfileLike.FULL"] )
    aRange.start <-  parGrid$aRange[ind]
    lambda.start <-  ProfileInfo$summary[ind,"lambda"] 
    cov.params.startTemp <- cov.params.start 
    #  update starting values with results from grid search over aRange
    cov.params.startTemp$aRange  <- aRange.start
    #  But do not use the lambda value this causes problems in the
    #  ozone2 example --- still mysterious to me why!
    #   commented out line:
     cov.params.startTemp$lambda <- lambda.start
    
    timeOptim<- system.time(
    MLEInfo <- mKrigMLEJoint(x, y, weights = weights, Z = Z,
                                            mKrig.args = mKrig.args,
                                               cov.function = cov.function,
                                              cov.args = cov.args, 
                                      cov.params.start = cov.params.startTemp,
                                            optim.args = optim.args,
                                                abstol = abstol,
                                                 na.rm = na.rm,
                                               verbose = verbose,
                                                  REML = REML)
  )
  if( verbose){
    cat("mKrigMLEJoint summary", fill=TRUE)
    print( MLEInfo$summary)
  }
    timingTable<- cbind( timeGrid, timeOptim)
  return(
     list( MLEInfo=MLEInfo, ProfileInfo=ProfileInfo, 
          timingTable=timingTable )
     )
}
