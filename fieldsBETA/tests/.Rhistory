c1 <- c(c1, "Degree of polynomial null space ( base model):")
if(x$m !=0 ){
c2 <- c(c2, x$m - 1)
}
else{
c2 <- c(c2, NA)
}
c1 <- c(c1, "Total number of parameters in base model")
c2 <- c(c2, x$nt)
if (x$nZ > 0) {
c1 <- c(c1, "Number of additional covariates (Z)")
c2 <- c(c2, x$nZ)
}
if (!is.na(x$eff.df)) {
c1 <- c(c1, " Eff. degrees of freedom")
c2 <- c(c2, signif(x$eff.df, digits))
if (length(x$trA.info) < x$np) {
c1 <- c(c1, "   Standard Error of estimate: ")
c2 <- c(c2, signif(sd(x$trA.info)/sqrt(length(x$trA.info)),
digits))
}
}
c1 <- c(c1, "Smoothing parameter")
c2 <- c(c2, signif(x$lambda.fixed, digits))
if (NData == 1) {
c1 <- c(c1, "MLE sigma ")
c2 <- c(c2, signif(x$shat.MLE, digits))
c1 <- c(c1, "MLE rho")
c2 <- c(c2, signif(x$rho.MLE, digits))
}
c1 <- c(c1, "Nonzero entries in covariance")
c2 <- c(c2, x$nonzero.entries)
sum <- cbind(c1, c2)
dimnames(sum) <- list(rep("", dim(sum)[1]), rep("", dim(sum)[2]))
########### save table of information and the call
object$summaryTable<- sum
object$call<- x$call
########### information for SE for fixed effects
if( x$collapseFixedEffect| (nData==1)){
object$fixedEffectsCov<- x$fixedEffectsCov
SE<- sqrt(diag(object$fixedEffectsCov))
d.coef<-  x$d
pValue<- pnorm(abs(d.coef/SE), lower.tail = FALSE)*2
object$fixedEffectsTable<- cbind( signif(d.coef, digits),
signif(SE, digits),
signif(pValue, digits)
)
if( is.null( x$fixedEffectNames )){
object$fixedEffectNames<- paste0("d",1:(x$nt) )
}
else{
object$fixedEffectNames<- x$fixedEffectNames
}
dimnames( object$fixedEffectsTable) <- list( object$fixedEffectNames,
c("estimate", "SE", "pValue") )
########### save covariance information
}
object$cov.function<- x$cov.function
object$args<- x$args
class( object)<-"mKrigSummary"
return( object)
}
print.mKrig<- function (x,...){
object<- summary.mKrig( x,...)
print.mKrigSummary(object)
}
N<- 1500
x<- matrix( 2*(runif(2*N)-.5),ncol=2)
y1<- sin( 1.8*pi*x[,1])*sin( 2.5*pi*x[,2]) + rnorm( N)*.01
y2<- sin( 1.8*pi*x[,1])*sin( 2.5*pi*x[,2]) + rnorm( N)*.01
Y<- cbind(y1,y2)
look3<- mKrig( x,Y,cov.function="wendland.cov",k=2, theta=.1,
lambda=1e2  )
look3
source('~/Dropbox/Home/Repositories/fields/fields/R/mKrig.family.R')
look3
names( look3)
look3$collapseFixedEffect
look3$d
source('~/Dropbox/Home/Repositories/fields/fields/R/mKrig.family.R')
look3
source('~/Dropbox/Home/Repositories/fields/fields/R/mKrig.family.R')
look3
look3$nt
x<- look3
object$fixedEffectsCov<- x$fixedEffectsCov
SE<- sqrt(diag(object$fixedEffectsCov))
d.coef<-  x$d[,1]
print( d.coef)
pValue<- pnorm(abs(d.coef/SE), lower.tail = FALSE)*2
object$fixedEffectsTable<- cbind( signif(d.coef, digits),
signif(SE, digits),
signif(pValue, digits)
)
if( is.null( x$fixedEffectNames )){
object$fixedEffectNames<- paste0("d",1:(x$nt) )
}
else{
object$fixedEffectNames<- x$fixedEffectNames
}
dimnames( object$fixedEffectsTable) <- list( object$fixedEffectNames,
c("estimate", "SE", "pValue") )
########### save covariance information
object<- list()
collapseFixedEffect
object$fixedEffectsCov<- x$fixedEffectsCov
SE<- sqrt(diag(object$fixedEffectsCov))
d.coef<-  x$d[,1]
print( d.coef)
pValue<- pnorm(abs(d.coef/SE), lower.tail = FALSE)*2
object$fixedEffectsTable<- cbind( signif(d.coef, digits),
signif(SE, digits),
signif(pValue, digits)
)
if( is.null( x$fixedEffectNames )){
object$fixedEffectNames<- paste0("d",1:(x$nt) )
}
else{
object$fixedEffectNames<- x$fixedEffectNames
}
dimnames( object$fixedEffectsTable) <- list( object$fixedEffectNames,
c("estimate", "SE", "pValue") )
########### save covariance information
digits<- 4
object$fixedEffectsCov<- x$fixedEffectsCov
SE<- sqrt(diag(object$fixedEffectsCov))
d.coef<-  x$d[,1]
print( d.coef)
pValue<- pnorm(abs(d.coef/SE), lower.tail = FALSE)*2
object$fixedEffectsTable<- cbind( signif(d.coef, digits),
signif(SE, digits),
signif(pValue, digits)
)
d.coef
SE
object$fixedEffectsCov
source('~/Dropbox/Home/Repositories/fields/fields/R/mKrig.R')
object$fixedEffectsCov
look3<- mKrig( x,Y,cov.function="wendland.cov",k=2, theta=.1,
lambda=1e2  )
look3<- mKrig( x,Y,cov.function="wendland.cov",k=2, theta=.1,
lambda=1e2  )
look3<- mKrig( x,Y,cov.function="wendland.cov",k=2, theta=.1,
lambda=1e2  , verbose=TRUE)
dim( Y)
dim( x)
x<- matrix( 2*(runif(2*N)-.5),ncol=2)
# the  log profile likehood with  rhohat  and  dhat substituted
# leaving a profile for just lambda.
# NOTE if y is a matrix then this is a vector of log profile
# likelihood values.
lnProfileLike <- (-np/2 - log(2 * pi) * (np/2) - (np/2) *
log(rho.MLE) - (1/2) * lnDetCov)
x<- matrix( 2*(runif(2*N)-.5),ncol=2)
look3<- mKrig( x,Y,cov.function="wendland.cov",k=2, theta=.1,
lambda=1e2  , verbose=TRUE)
look3
names(look)
names(look3)
look3$collapseFixedEffect
hold<- summary(look3)
hold
source('~/Dropbox/Home/Repositories/fields/fields/R/mKrig.family.R')
hold$collapse
look3
source('~/Dropbox/Home/Repositories/fields/fields/R/mKrig.family.R')
look3
source('~/Dropbox/Home/Repositories/fields/fields/R/mKrig.family.R')
look3
summary( look3)
names( summary(look3))
summary.mKrig
data( ozone2)
y<- ozone2$y[16,]
good<- !is.na( y)
y<-y[good]
x<- ozone2$lon.lat[good,]
out<- spatialProcess(x,y)
summary( out)
source('~/Dropbox/Home/Repositories/fields/fields/R/summary.spatialProcess.R')
source('~/Dropbox/Home/Repositories/fields/fields/R/summary.spatialProcess.R')
summary( out)
source('~/Dropbox/Home/Repositories/fields/fields/R/summary.spatialProcess.R')
source('~/Dropbox/Home/Repositories/fields/fields/R/summary.spatialProcess.R')
summary( out)
summary.spatialProcess
source('~/Dropbox/Home/Repositories/fields/fields/R/summary.spatialProcess.R')
print.mKrig
names( spatialProcessSummary(out))
names( summary.spatialProcess(out))
summary.mKrig
source('~/Dropbox/Home/Repositories/fields/fields/R/summary.spatialProcess.R')
source('~/Dropbox/Home/Repositories/fields/fields/R/summary.spatialProcess.R')
source('~/Dropbox/Home/Repositories/fields/fields/R/summary.spatialProcess.R')
source('~/Dropbox/Home/Repositories/fields/fields/R/print.spatialProcess.R')
look<- summary.spatialProcess(out)
out$nt
source('~/Dropbox/Home/Repositories/fields/fields/R/summary.spatialProcess.R')
look<- summary.spatialProcess(out)
source('~/Dropbox/Home/Repositories/fields/fields/R/summary.spatialProcess.R')
look<- summary.spatialProcess(out)
source('~/Dropbox/Home/Repositories/fields/fields/R/summary.spatialProcess.R')
look<- summary.spatialProcess(out)
names( out)
out$summary
out$Omega
spatialProcess
source('~/Dropbox/Home/Repositories/fields/fields/R/mKrig.R')
source('~/Dropbox/Home/Repositories/fields/fields/R/spatialProcess.R')
out<- spatialProcess( x,y)
summary.spatialProcess(out)
names( out)
out$fixedEffectsCov
source('~/Dropbox/Home/Repositories/fields/fields/R/print.spatialProcess.R')
summary.spatialProcess(out)
source('~/Dropbox/Home/Repositories/fields/fields/R/print.spatialProcess.R')
summary.spatialProcess(out)
source('~/Dropbox/Home/Repositories/fields/fields/R/summary.spatialProcess.R')
summary.spatialProcess(out)
source('~/Dropbox/Home/Repositories/fields/fields/R/print.spatialProcess.R')
summary.spatialProcess(out)
source('~/Dropbox/Home/Repositories/fields/fields/R/summary.spatialProcess.R')
summary.spatialProcess(out)
source('~/Dropbox/Home/Repositories/fields/fields/R/print.spatialProcess.R')
summary.spatialProcess(out)
source('~/Dropbox/Home/Repositories/fields/fields/R/print.spatialProcess.R')
summary.spatialProcess(out)
source('~/Dropbox/Home/Repositories/fields/fields/R/print.spatialProcessSummary.R')
source('~/Dropbox/Home/Repositories/fields/fields/R/print.spatialProcess.R')
print(out)
q()
install.packages("geoR")
log10(4e3)
library( fields)
nTest<- 20
N<- round(10**seq( 2,3.6,length.out=nTest))
timingOut<- matrix( NA, ncol=6, nrow=nTest)
for (  k in 1:nTest ){
n<- N[k]
cat(n, " ")
A<- diag( 1, n)
A[ cbind( 1:(n-1),2:n) ]<- .2
A[ cbind( 2:n,1:(n-1)) ]<- .2
A<- A%*%t(A)
ASparse<- as.spam( A)
time.out<- system.time( cholA<- chol(A)  )
timingOut[k,1]<- time.out[3]
set.seed(122)
x<- rnorm( n)
time.out<- system.time( out2<- backsolve(cholA,x)   )
timingOut[k,2]<- time.out[3]
time.out<- system.time( cholASparse<- chol(ASparse)  )
timingOut[k,3]<- time.out[3]
time.out<- system.time( out2<- backsolve(cholASparse,x)   )
timingOut[k,4]<- time.out[3]
}
save( N, timingOut, file="timingSparse.rda")
timingOut[timingOut==0]<- NA
fields.style()
matplot( N, timingOut[,c(1:4)], type='l', lty=1,
xlab="Matrix size", ylab="seconds",
log="xy")
quartz()
timingOut[timingOut==0]<- NA
fields.style()
matplot( N, timingOut[,c(1:4)], type='l', lty=1,
xlab="Matrix size", ylab="seconds",
log="xy")
timingOut
0.269/0.003
library( fields)
nTest<- 20
N<- round(10**seq( 2,3.7,length.out=nTest))
timingOut<- matrix( NA, ncol=6, nrow=nTest)
for (  k in 1:nTest ){
n<- N[k]
cat(n, " ")
A<- diag( 1, n)
A[ cbind( 1:(n-1),2:n) ]<- .2
A[ cbind( 2:n,1:(n-1)) ]<- .2
A<- A%*%t(A)
A<- A%*%A
ASparse<- as.spam( A)
time.out<- system.time( cholA<- chol(A)  )
timingOut[k,1]<- time.out[3]
set.seed(122)
x<- rnorm( n)
time.out<- system.time( out2<- backsolve(cholA,x)   )
timingOut[k,2]<- time.out[3]
time.out<- system.time( cholASparse<- chol(ASparse)  )
timingOut[k,3]<- time.out[3]
time.out<- system.time( out2<- backsolve(cholASparse,x)   )
timingOut[k,4]<- time.out[3]
}
save( N, timingOut, file="timingSparse.rda")
timingOut[timingOut==0]<- NA
fields.style()
matplot( N, timingOut[,c(1,3)], type='l', lty=1,
xlab="Matrix size", ylab="seconds",
log="xy")
)
matplot( N, timingOut[,c(1,3)], type='l', lty=1,
xlab="Matrix size", ylab="seconds",
log="xy")
matplot( N, timingOut[,c(1,3)], type='l', lty=1,
xlab="Matrix size", ylab="seconds"
)
matplot( N, timingOut[,c(1,3)], type='l', lty=1,
xlab="Matrix size", ylab="seconds",
log="xy")
nTest<- 20
N<- round(10**seq( 2,3.8,length.out=nTest))
timingOut<- matrix( NA, ncol=6, nrow=nTest)
for (  k in 1:nTest ){
n<- N[k]
cat(n, " ")
A<- diag( 1, n)
A[ cbind( 1:(n-1),2:n) ]<- .2
A[ cbind( 2:n,1:(n-1)) ]<- .2
A<- A%*%t(A)
A<- A%*%A
ASparse<- as.spam( A)
time.out<- system.time( cholA<- chol(A)  )
timingOut[k,1]<- time.out[3]
set.seed(122)
x<- rnorm( n)
time.out<- system.time( out2<- backsolve(cholA,x)   )
timingOut[k,2]<- time.out[3]
time.out<- system.time( cholASparse<- chol(ASparse)  )
timingOut[k,3]<- time.out[3]
time.out<- system.time( out2<- backsolve(cholASparse,x)   )
timingOut[k,4]<- time.out[3]
}
save( N, timingOut, file="timingSparse.rda")
timingOut[timingOut==0]<- NA
fields.style()
matplot( N, timingOut[,c(1,3)], type='l', lty=1,
xlab="Matrix size", ylab="seconds"
)
matplot( N, timingOut[,c(1,3)], type='l', lty=1,
xlab="Matrix size", ylab="seconds",
log="xy")
print( cbind( N, timingOut[,c(2,4)])
)
print( cbind( N, timingOut)
)
library( fields)
nTest<- 20
N<- round(10**seq( log10(500),log10(7500),
length.out=nTest))
timingOut<- matrix( NA, ncol=4, nrow=nTest)
for (  k in 1:nTest ){
n<- N[k]
cat(n, " ")
A<- diag( 1, n)
A[ cbind( 1:(n-1),2:n) ]<- .2
A[ cbind( 2:n,1:(n-1)) ]<- .2
A<- A%*%t(A)
A<- A%*%A
ASparse<- as.spam( A)
time.out<- system.time( cholA<- chol(A)  )
timingOut[k,1]<- time.out[3]
set.seed(122)
x<- rnorm( n)
time.out<- system.time( out2<- backsolve(cholA,x)   )
timingOut[k,2]<- time.out[3]
time.out<- system.time( cholASparse<- chol(ASparse)  )
timingOut[k,3]<- time.out[3]
time.out<- system.time( out2<- backsolve(cholASparse,x)   )
timingOut[k,4]<- time.out[3]
}
print( cbind( N, timingOut)
save( N, timingOut, file="timingSparse.rda")
timingOut[timingOut==0]<- NA
fields.style()
matplot( N, timingOut[,c(1,3)], type='l', lty=1,
xlab="Matrix size", ylab="seconds"
)
fields.style()
matplot( N, timingOut[,c(1,3)], type='l', lty=1,
xlab="Matrix size", ylab="seconds",
log="xy")
fields.style()
matplot( N, timingOut[,c(1,3)], type='l', lty=1,
xlab="Matrix size", ylab="seconds",
log="xy")
quartz()
fields.style()
matplot( N, timingOut[,c(1,3)], type='l', lty=1,
xlab="Matrix size", ylab="seconds"
)
print( cbind( N, timingOut)
)
A<- diag( 1,5)
A[1,1:5]<- A[1,1:5] +.2
A[1:5,1]<- A[1,1:5]
A
chol(A)
AP<- A[5:1,5:1]
AP
chol(AP)
library( fields)
setwd("~/Dropbox/Home/Repositories/fields/fields/tests")
system.time( "mKrig.MLE.test.R")
system.time( source("mKrig.MLE.test.R") )
system.time( source("mKrigMLETest.R") )
system.time( source("mKrigMLETest.R") )
NS<- 3
n<-75
M<- 4000
set.seed(123)
x = matrix(runif(2*n), nrow=n)
trueTheta = .1
trueLambda = .04
Sigma = genCovMat(x, trueTheta, trueLambda)
U = chol(Sigma)
set.seed( 332)
hold<- matrix(NA, nrow=NS, ncol=7 )
for( k in 1:NS){
cat(k, " ")
#generate observations at the locations
y = t(U)%*%matrix( rnorm(n*M), n,M)
MLEfitC <- mKrigMLEJoint(x, y, lambda.start=.5,
cov.params.start= list(theta=.12),
cov.fun="stationary.cov",
optim.args=optim.args,
cov.args = list(Covariance = "Matern",
smoothness=1.0),
na.rm=TRUE,
mKrig.args = list( m=2),
REML=FALSE,
verbose=FALSE)
hold[k,]<- MLEfitC$summary
}
cat("all done with mKrigMLEGrid tests", fill=TRUE)
options( echo=TRUE)
test.for.zero( trueTheta, mean(hold[,3]), tol=2e-3,tag="Monte Carlo theta")
test.for.zero( trueLambda, mean(hold[,2]), tol=2e-2,tag="Monte Carlo theta")
trueTheta, mean(hold[,3])
trueTheta; mean(hold[,3])
system.time( source("mKrigMLETest.R") )
system.time( source("mKrigMLETest.R") )
system.time( source("mKrigMLETest.R") )
system.time( source("mKrigMLETest.R") )
system.time( source("mKrigMLETest.R") )
system.time( source("mKrigMLETest.R") )
system.time( source("mKrigMLETest.R") )
system.time( source("mKrigMLETest.R") )
system.time( source("mKrigMLETest.R") )
system.time( source("mKrigMLETest.R") )
system.time( source("mKrigMLETest.R") )
x
data( ozone2)
# x is a two column matrix where each row is a location in lon/lat
# coordinates
x<- ozone2$lon.lat
# y is a vector of ozone measurements at day 16 a the locations.
y<- ozone2$y[16,]
#ind<- !is.na( y)
#x<- x[ind,]
#y<- y[ind]
x< x[1:30,]
y<-y[1:30]
x
dim( x)
system.time( source("mKrigMLETest.R") )
system.time( source("mKrigMLETest.R") )
system.time( source("mKrigMLETest.R") )
y
data( ozone2)
# x is a two column matrix where each row is a location in lon/lat
# coordinates
x<- ozone2$lon.lat
# y is a vector of ozone measurements at day 16 a the locations.
y<- ozone2$y[16,]
#ind<- !is.na( y)
#x<- x[ind,]
#y<- y[ind]
x<-x[1:30,]
y<-y[1:30]
y
system.time( source("mKrigMLETest.R") )
system.time( source("mKrigMLETest.R") )
system.time( source("mKrigMLETest.R") )
out1<- Krig( x,y,  cov.fun="stationary.cov",
cov.args = list(Covariance = "Matern",
smoothness=1.0, theta=.9),
na.rm=TRUE,
m=2)
x<-x[1:31,]
y<-y[1:31]
y[31]<-NA
out1<- Krig( x,y,  cov.fun="stationary.cov",
cov.args = list(Covariance = "Matern",
smoothness=1.0, theta=.9),
na.rm=TRUE,
m=2)
out1
optim.args = list(method = "BFGS",
control = list(fnscale = -1, parscale = c(0.5, 0.5),
ndeps = c(0.05,0.05)))
MLEfit0 <- mKrigMLEJoint(x, y, lambda.start=.5,
cov.params.start= list(theta=1.2),
cov.fun="stationary.cov",
optim.args=optim.args,
cov.args = list(Covariance = "Matern", smoothness=1.0),
na.rm=TRUE,
mKrig.args = list( m=1),
verbose=FALSE)
MLEfit0$dummary
MLEfit0$summary
system.time( source("mKrigMLETest.R") )
