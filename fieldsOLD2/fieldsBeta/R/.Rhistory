library( geoR)
ml.n <- likfit(coords= x1, data=y1, ini = c(570, 3), nug = 50)
# compare to
stuffFields<- obj$MLESummary[c("lnProfileLike.FULL",
"aRange","tau","sigma2")]
stuffGeoR<- c( ml.n$loglik, ml.n$phi, sqrt(ml.n$nugget),
ml.n$sigmasq)
test.for.zero(  max(stuffFields/stuffGeoR), 1, tol=.004)
splint(rat.diet$t, rat.diet$trt,x )-> y
plot( rat.diet$t, rat.diet$trt)
lines( x,y)
#( this is weird and not appropriate!)
# the following two smooths should be the same
splint( rat.diet$t, rat.diet$con,x, df= 7)-> y1
# sreg function has more flexibility than splint but will
# be slower for larger data sets.
sreg( rat.diet$t, rat.diet$con, df= 7)-> obj
predict(obj, x)-> y2
# in f
x<- seq( 0, 120,,200)
# an interpolation
splint(rat.diet$t, rat.diet$trt,x )-> y
plot( rat.diet$t, rat.diet$trt)
lines( x,y)
splint( rat.diet$t, rat.diet$con,x, df= 7)-> y1
# sreg function has more flexibility than splint but will
# be slower for larger data sets.
sreg( rat.diet$t, rat.diet$con, df= 7)-> obj
predict(obj, x)-> y2
lines( x,y1, col="red",lwd=2)
lines(x,y2, col="blue", lty=2,lwd=2)
plot(rat.diet$t, rat.diet$con)
lines( x,y1, col="red",lwd=2)
lines(x,y2, col="blue", lty=2,lwd=2)
fit<- sreg(rat.diet$t,rat.diet$con)
summary( fit)
set.panel(2,2)
plot(fit)                       # four diagnostic plots of  fit
set.panel()
predict( fit) # predicted values at data points
xg<- seq(0,110,,50)
sm<-predict( fit, xg) # spline fit at 50 equally spaced points
der.sm<- predict( fit, xg, deriv=1) # derivative of spline fit
set.panel( 2,1)
plot( fit$x, fit$y) # the data
lines( xg, sm) # the spline
plot( xg,der.sm, type="l") # plot of estimated derivative
set.panel() # reset panel to 1 plot
fit.tps<-Tps( rat.diet$t,rat.diet$con, scale="unscaled")
summary( fit.tps)
# compare sreg and Tps results to show the adjustment to lambda.
predict( fit)-> look
predict( fit.tps, lambda=fit$lambda*fit$N)-> look2
test.for.zero( look, look2) # silence means it checks to 1e-8
SE<- fit$tauHat.GCV*sqrt(fit$diagA)
Zvalue<-  qnorm(.0975)
upper<- fit$fitted.values + Zvalue* SE
lower<- fit$fitted.values - Zvalue* SE
#
# conservative, simultaneous Bonferroni bounds
#
ZBvalue<-  qnorm(1- .025/fit$N)
upperB<- fit$fitted.values + ZBvalue* SE
lowerB<- fit$fitted.values - ZBvalue* SE
#
plot( fit$x, fit$y)
lines( fit$predicted, lwd=2)
matlines( fit$x,
cbind( lower, upper, lowerB, upperB), type="l", col=c( 2,2,4,4), lty=1)
title( "95 pct pointwise  and simultaneous intervals")
#
plot( fit$x, fit$y)
lines( fit$predicted, lwd=2)
segments(  fit$x, lowerB, fit$x, upperB, col=4)
segments(  fit$x, lower, fit$x, upper, col=2, lwd=2)
title( "95 pct pointwise  and simultaneous intervals")
set.panel( 1,1)
plot( fit$x, fit$y)
lines( fit$predicted, lwd=2)
envelopePlot(lower, upper, lowerB, upperB)
envelopePlot(fit$x, lower, upper)
plot( fit$x, fit$y)
lines( fit$predicted, lwd=2)
envelopePlot(fit$x, lower,fit$x, upper)
envelopePlot
envelopePlot(fit$x, lowerB,fit$x, upperB, col = "thistle2")
plot( fit$x, fit$y, type="n")
envelopePlot(fit$x, lowerB,fit$x, upperB, col = "grey70")
envelopePlot(fit$x, lower,fit$x, upper)
lines( fit$predicted, lwd=2)
points( fit$x, fit$y,pch=16)
dev.off()
plot( fit$x, fit$y, type="n")
envelopePlot(fit$x, lowerB,fit$x, upperB, col = "grey90")
envelopePlot(fit$x, lower,fit$x, upper)
lines( fit$predicted, lwd=2)
points( fit$x, fit$y,pch=16)
plot( fit$x, fit$y, type="n")
envelopePlot(fit$x, lowerB,fit$x, upperB, col = "grey90",
border="magenta")
envelopePlot(fit$x, lower,fit$x, upper, border="magenta")
lines( fit$predicted, lwd=2)
points( fit$x, fit$y,pch=16)
envelopePlot
plot( fit$x, fit$y, type="n")
envelopePlot(fit$x, lowerB,fit$x, upperB, col = "grey90",
lineCol="magenta")
envelopePlot(fit$x, lower,fit$x, upper, lineCol="magenta")
lines( fit$predicted, lwd=2)
points( fit$x, fit$y,pch=16)
plot( fit$x, fit$y, type="n")
envelopePlot(fit$x, lowerB,fit$x, upperB, col = "grey90",
lineCol="grey")
envelopePlot(fit$x, lower,fit$x, upper, lineCol="grey")
lines( fit$predicted, lwd=2,col="red",lwd=2)
points( fit$x, fit$y,pch=16)
t
lines( fit$predicted, col="red",lwd=2)
plot( fit$x, fit$y)
lines( fit$predicted, lwd=2)
segments(  fit$x, lowerB, fit$x, upperB, col=4)
segments(  fit$x, lower, fit$x, upper, col=2, lwd=2)
title( "95 pct pointwise  and simultaneous intervals")
plot( fit$x, fit$y, type="n")
segments(  fit$x, lowerB, fit$x, upperB, col="grey",lwd=2)
segments(  fit$x, lower, fit$x, upper, col="thistle3", lwd=3)
lines( fit$predicted, lwd=2)
points( fit$x, fit$y,pch=16)
title( "95 pct pointwise  and simultaneous intervals")
plot( fit$x, fit$y, type="n")
segments(  fit$x, lowerB, fit$x, upperB, col="grey",lwd=3)
segments(  fit$x, lower, fit$x, upper, col="thistle3", lwd=6)
lines( fit$predicted, lwd=2,col="red")
points( fit$x, fit$y,pch=16)
title( "95 pct pointwise  and simultaneous intervals")
zork<- matrix( rnorm(200), ncol=8)
stats(zork)
zork<- rnorm( 200)
id<- sample( 1:8, 200, replace=TRUE)
stats( zork, by=id)
u<- rnorm( 2000)
v<- rnorm( 2000)
x<- u
y<- .7*u + sqrt(1-.7**2)*v
look<- stats.bin( x,y)
look$stats["Std.Dev.",]
data( ozone2)
# make up a variogram day 16 of Midwest daily ozone ...
look<- vgram( ozone2$lon.lat, c(ozone2$y[16,]), lon.lat=TRUE)
# break points
brk<- seq( 0, 250,,40)
out<-stats.bin( look$d, look$vgram, breaks=brk)
# plot bin means, and some quantiles  Q1, median, Q3
matplot( out$centers, t(out$stats[ c("mean", "median","Q1", "Q3"),]),
type="l",lty=c(1,2,2,2), col=c(3,4,3,4), ylab="ozone PPB")
fit<- Krig(ChicagoO3$x, ChicagoO3$y, aRange=100)
summary(fit)                            # summary of fit
supportsArg(Rad.cov, "distMat")
supportsArg(Rad.cov, "onlyUpper")
supportsArg(stationary.cov, "distMat")
supportsArg(stationary.cov, "onlyUpper")
supportsArg(Exp.cov, "distMat")
supportsArg(Exp.cov, "onlyUpper")
fit<- Krig(ChicagoO3$x,ChicagoO3$y, aRange=30)  # krig fit
#Image plot of surface with nice, smooth  contours and shading
surface(fit, type="C", nx=128, ny=128)
tim.colors(10)
set.panel( 4,1)
fieldsPlotColors( tim.colors())
title("tim.colors")
fieldsPlotColors( larry.colors())
title("larry.colors")
fieldsPlotColors( two.colors())
title("two.colors")
fieldsPlotColors( snow.colors())
title("snow.colors")
set.seed(123)
loc<- matrix( rnorm( 200), 100,2)
Z<- loc[,1] + loc[,2]
colorMap<- color.scale( Z, col=tim.colors(10, alpha=.8))
par( mar=c(5,5,5,5)) # extra room on right for color bar
plot( loc, col=colorMap, pch=16, cex=2)
#  add a color scale
image.plot(legend.only=TRUE, zlim=range( Z), col=tim.colors(10))
dev.off()
set.seed(123)
loc<- matrix( rnorm( 200), 100,2)
Z<- loc[,1] + loc[,2]
colorMap<- color.scale( Z, col=tim.colors(10, alpha=.8))
par( mar=c(5,5,5,5)) # extra room on right for color bar
plot( loc, col=colorMap, pch=16, cex=2)
image.plot(legend.only=TRUE, zlim=range( Z), col=tim.colors(10))
obj<- list( x= 1:8, y=1:10, z= outer( 1:8, 1:10, "+") )
plot( 1:10,1:10)
image(obj, col=two.colors(alpha=.5), add=TRUE)
coltab<- designer.colors(col=c("blue", "grey", "green"),
x= c( 0,.3,1) )
image( obj, col= coltab )
coltab<- designer.colors(col=c("blue", "grey", "magenta"),
x= c( 0,.3,1) )
image( obj, col= coltab )
coltab<- designer.colors(col=c("darkblue", "grey", "magenta"),
x= c( 0,.3,1) )
image( obj, col= coltab )
x<- quantile( c(obj$z), c(0,.25,.5,.75,1.0) )
# scale these to [0,1]
zr<- range( c(obj$z))
x<- (x-zr[1])/ (zr[2] - zr[1])
coltab<- designer.colors(256,rainbow(5), x)
image( obj$z, col= coltab )
newx<-transformx( ChicagoO3$x, scale.type="range")
newx
data( ozone2)
good<- !is.na(ozone2$y[16,])
x<- ozone2$lon.lat[good,]
y<- ozone2$y[16,good]
look<-vgram( x,y, N=15, lon.lat=TRUE) # locations are in lon/lat so use right
#distance
# take a look:
plot(look, pch=19)
boxplotVGram(look, breaks=brk, plot.args=list(type="o"))
plot(look, add=TRUE, breaks=brk, col=4)
look<-vgram( x,y, N=15, lon.lat=TRUE, type="covariogram")
plot(look, breaks=brk, col=4)
look = crossCoVGram(x, x, y, y, N=15, lon.lat=TRUE, type="cross-covariogram")
plot(look, breaks=brk, col=4)
data(lennon)
out<-vgram.matrix( lennon)
plot( out$d, out$vgram, xlab="separation distance", ylab="variogram")
# image plot of vgram values by direction.
# look at different directions
out<-vgram.matrix( lennon, R=8)
plot( out$d, out$vgram)
# add in different orientations
points( out$d.full, out$vgram.full, col="red")
set.panel(1,1)
plot.vgram.matrix( out)
world()
# add the US
US( add=TRUE,col="blue")
world( fill=TRUE) # land filled in black
## Western Europe
world( xlim=c(-10,18),ylim=c(36,60),fill=TRUE, col="darkgreen",
border="green1")
## End(Not run)
plot( 1:10)
xline( 6.5, col=2)
world( col=3)
yline( seq( -80,80,10),col=4, lty=2)
xline( seq( -180,180,10),col=4,lty=2)
yline( 0, lwd=2, col=4)
world( col=3)
yline( seq( -80,80,10),col=4, lty=2)
xline( seq( -180,180,10),col=4,lty=2)
yline( 0, lwd=2, col=4)
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/fastTps.family.R')
data( ozone2)
# x is a two column matrix where each row is a location in lon/lat
# coordinates
s<- ozone2$lon.lat
# y is a vector of ozone measurements at day 16. Note some missing values.
z<- ozone2$y[16,]
good<- !is.na( y)
s<- s[good,]
z<- z[good]
objTest<- fastTps( s,z, aRange= 1.0)
setwd("~/Dropbox/Home/Repositories/fields/fieldsBeta/R")
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/fastTps.R')
library( fields)
remove( list=ls())
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/fastTps.R')
data( ozone2)
# x is a two column matrix where each row is a location in lon/lat
# coordinates
s<- ozone2$lon.lat
# y is a vector of ozone measurements at day 16. Note some missing values.
z<- ozone2$y[16,]
good<- !is.na( y)
s<- s[good,]
z<- z[good]
objTest<- fastTps( s,z, aRange= 1.0)
data( ozone2)
# x is a two column matrix where each row is a location in lon/lat
# coordinates
s<- ozone2$lon.lat
# y is a vector of ozone measurements at day 16. Note some missing values.
z<- ozone2$y[16,]
good<- !is.na( z)
s<- s[good,]
z<- z[good]
objTest<- fastTps( s,z, aRange= 1.0)
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/fastTps.R')
objTest<- fastTps( s,z, aRange= 1.0)
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/fastTps.R')
objTest<- fastTps( s,z, aRange= 1.0)
objTest
surface( objTest)
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/spatialProcessSetDefaults.R')
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/spatialProcessSetDefaults.R')
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/spatialProcess.R')
objTest<- fastTps( s,z, aRange= 1.0)
objTest
objTest$MLEInfo
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMLEJoint.R')
objTest<- fastTps( s,z, aRange= 1.0)
objTest$MLEInfo
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMLEJoint.R')
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMLEJoint.R')
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMLEJoint.R')
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMLEJoint.R')
objTest<- fastTps( s,z, aRange= 1.0)
objTest$MLEInfo
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/spatialProcess.R')
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/spatialProcess.R')
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/spatialProcess.R')
objTest<- fastTps( s,z, aRange= 1.0)
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/fastTps.R')
objTest<- fastTps( s,z, aRange= 1.0)
objTest<- fastTps( s,z, aRange= 1.0, GCV=TRUE)
objTest<- fastTps( s,z, aRange= 1.0, GCV=TRUE,verbose=TRUE)
objTest<- fastTps( s,z, aRange= 1.0, GCV=FALSE)
objTest$summary
objTest<- fastTps( s,z, aRange= 1.0, GCV=FALSE)
objTest$summary
objTest<- fastTps( s,z, aRange= 1.0, GCV=FALSE, lambda=.1)
objTest$summary
objTest<- fastTps( s,z, aRange= 1.0, GCV=FALSE, lambda=.1)
objTest$summary
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMisc.R')
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrig.R')
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMisc.R')
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMLEJoint.R')
objTest<- fastTps( s,z, aRange= 1.0, GCV=FALSE, lambda=.1)
objTest<- fastTps( s,z, aRange= 1.0, GCV=TRUE,verbose=TRUE)
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMLEJoint.R')
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMLEJoint.R')
objTest<- fastTps( s,z, aRange= 1.0, GCV=TRUE,verbose=TRUE)
objTest<- fastTps( s,z, aRange= 1.0, GCV=FALSE,verbose=TRUE)
objTest<- fastTps( s,z, aRange= 1.0, GCV=FALSE,REML=TRUE,verbose=TRUE)
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMLEJoint.R')
objTest<- fastTps( s,z, aRange= 1.0, GCV=FALSE,REML=TRUE,verbose=TRUE)
objTest<- fastTps( s,z, aRange= 1.0, GCV=TRUE,REML=FALSE,verbose=TRUE)
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMLEJoint.R')
objTest<- fastTps( s,z, aRange= 1.0, GCV=TRUE,REML=FALSE,verbose=TRUE)
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMLEJoint.R')
objTest<- fastTps( s,z, aRange= 1.0, GCV=TRUE,REML=FALSE,verbose=TRUE)
objGCV <- spatialProcess(s,z, aRange=1.0, GCV=TRUE)
objGCV <- spatialProcess(s,z, aRange=1.0, GCV=TRUE, verbose=TRUE)
objGCV <- spatialProcess(s,z, aRange=1.0, gridLambda = seq(.1,1,,10 ),
verbose=TRUE)
objGCV <- spatialProcess(s,z, aRange=1.0, gridLambda = seq(.1,1,,10 ),
verbose=TRUE, profileLambda = TRUE)
objGCV$lambdaProfile
names( objGCV)
objGCV$lambdaProfile
objGCV$CASE
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/spatialProcessSetDefaults.R')
objGCV <- spatialProcess(s,z, aRange=1.0, gridLambda = seq(.1,1,,10 ),
verbose=TRUE, profileLambda = TRUE)
objGCV
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMLEGrid.R')
objGCV <- spatialProcess(s,z, aRange=1.0, gridLambda = seq(.1,1,,10 ),
verbose=TRUE, profileLambda = TRUE)
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/spatialProcess.R')
obj2<- spatialProcess(s,z,  aRange=.8 )
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMLEJoint.R')
obj2<- spatialProcess(s,z,  aRange=.8 )
obj2
obj2B<- spatialProcess(s,z,  aRange=.8,profileLambda = TRUE )
obj2B<- spatialProcess(s,z,  aRange=.8,profileLambda = TRUE,verbose=TRUE )
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/spatialProcess.R')
obj2B<- spatialProcess(s,z,  aRange=.8,profileLambda = TRUE,verbose=TRUE )
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/spatialProcessSetDefaults.R')
obj2B<- spatialProcess(s,z,  aRange=.8,profileLambda = TRUE,verbose=TRUE )
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/spatialProcess.R')
obj2B<- spatialProcess(s,z,  aRange=.8,profileLambda = TRUE,verbose=TRUE )
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMLEJoint.R')
obj2B<- spatialProcess(s,z,  aRange=.8,profileLambda = TRUE,verbose=TRUE )
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMLEJoint.R')
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMLEJoint.R')
obj2B<- spatialProcess(s,z,  aRange=.8,profileLambda = TRUE,verbose=TRUE )
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMLEJoint.R')
obj2B<- spatialProcess(s,z,  aRange=.8,profileLambda = TRUE,verbose=TRUE )
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMLEJoint.R')
obj2B<- spatialProcess(s,z,  aRange=.8,profileLambda = TRUE,verbose=TRUE )
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMLEJoint.R')
obj2B<- spatialProcess(s,z,  aRange=.8,profileLambda = TRUE,verbose=TRUE )
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/mKrigMLEJoint.R')
obj2B<- spatialProcess(s,z,  aRange=.8,profileLambda = TRUE,verbose=TRUE )
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/spatialProcess.R')
obj2B<- spatialProcess(s,z,  aRange=.8,profileLambda = TRUE,verbose=TRUE )
obj2B<- spatialProcess(s,z,  aRange=.8,profileLambda = TRUE,verbose=FALSE )
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/spatialProcess.R')
obj2B<- spatialProcess(s,z,  aRange=.8,profileLambda = TRUE,verbose=FALSE )
obj2B$lambda.CI
obj2B$lambdaProfile
plot.spatialProcess( obj2B)
obj2C<- spatialProcess(s,z,  aRange=.8, profileLambda = TRUE,
gridLambda= seq( -3,0,,50))
plot.spatialProcess( obj2C)
obj2C<- spatialProcess(s,z,  aRange=.8, profileLambda = TRUE,
gridLambda= 10**seq( -3,0,,50)
)
plot.spatialProcess( obj2C)
obj2C<- spatialProcess(s,z,  aRange=.8, profileLambda = TRUE,
gridLambda= 10**seq( -3,0,,50)
)
plot.spatialProcess( obj2C)
obj2C<- spatialProcess(s,z,  aRange=.8, profileLambda = TRUE,
gridLambda= 10**seq( -3,0,,50) ,mKrig.args= list( iseed=23)
)
plot.spatialProcess( obj2C)
obj2C<- spatialProcess(s,z,  aRange=.8, profileLambda = TRUE,
gridLambda= 10**seq( -3,0,,50) ,mKrig.args= list( iseed=23)
)
plot.spatialProcess( obj2C)
obj2C<- spatialProcess(s,z,  aRange=.8, profileLambda = TRUE,
gridLambda= 10**seq( -3,0,,50) ,mKrig.args= list( iseed=NA)
)
plot.spatialProcess( obj2C)
obj2C<- spatialProcess(s,z,  aRange=.8, profileLambda = TRUE,
gridLambda= 10**seq( -3,0,,50) ,mKrig.args= list( iseed=23)
)
plot.spatialProcess( obj2C)
obj2C<- spatialProcess(s,z,  aRange=.8, profileLambda = TRUE,
gridLambda= 10**seq( -3,0,,50) ,mKrig.args= list( iseed=NA)
)
plot.spatialProcess( obj2C)
obj2C<- spatialProcess(s,z,  aRange=.8, profileLambda = TRUE, GCV=TRUE,
gridLambda= 10**seq( -3,0,,50) ,mKrig.args= list( iseed=NA)
)
plot.spatialProcess( obj2C)
obj2C<- spatialProcess(s,z,  aRange=.8, profileLambda = TRUE, GCV=TRUE,
gridLambda= 10**seq( -3,0,,50) ,mKrig.args= list( iseed=34)
)
plot.spatialProcess( obj2C)
obj2C<- spatialProcess(s,z,  aRange=.8, profileLambda = TRUE,
gridLambda= 10**seq( -3,0,,50) ,mKrig.args= list( iseed=34)
)
plot.spatialProcess( obj2C)
obj2C<- spatialProcess(s,z,  aRange=.8, profileLambda = TRUE,
gridLambda= 10**seq( -3,0,,50) ,mKrig.args= list( iseed=34)
)
plot.spatialProcess( obj2C)
obj2C<- spatialProcess(s,z,  aRange=.8, profileLambda = TRUE,
gridLambda= 10**seq( -3,0,,50) ,mKrig.args= list( iseed=34)
)
plot.spatialProcess( obj2C)
obj2C<- spatialProcess(s,z,  aRange=.8, profileLambda = TRUE,
gridLambda= 10**seq( -3,0,,50) ,mKrig.args= list( iseed=34,
nTrA=200)
)
plot.spatialProcess( obj2C)
args( mKrig)
obj2C<- spatialProcess(s,z,  aRange=.8, profileLambda = TRUE,
gridLambda= 10**seq( -3,0,,50) ,mKrig.args= list( iseed=34,
NtrA=200)
)
plot.spatialProcess( obj2C)
obj2C<- spatialProcess(s,z,  aRange=.8, profileLambda = TRUE, GCV=TRUE
gridLambda= 10**seq( -3,0,,50) ,mKrig.args= list( iseed=34,
NtrA=200)
)
plot.spatialProcess( obj2C)
obj2C<- spatialProcess(s,z,  aRange=.8, profileLambda = TRUE, GCV=TRUE,
gridLambda= 10**seq( -3,0,,50) ,mKrig.args= list( iseed=34,
NtrA=200)
)
plot.spatialProcess( obj2C)
obj2C<- spatialProcess(s,z,  aRange=.8, profileLambda = TRUE,
gridLambda= 10**seq( -3,0,,50) ,mKrig.args= list( iseed=34,
NtrA=200)
)
plot.spatialProcess( obj2C)
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/plot.spatialProcess.R')
obj2C<- spatialProcess(s,z,  aRange=.8, profileLambda = TRUE,
gridLambda= 10**seq( -3,0,,50) ,mKrig.args= list( iseed=34,
NtrA=200)
)
plot.spatialProcess( obj2C)
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/plot.spatialProcess.R')
obj2C<- spatialProcess(s,z,  aRange=.8, profileLambda = TRUE,
gridLambda= 10**seq( -3,0,,50) ,mKrig.args= list( iseed=34,
NtrA=200)
)
plot.spatialProcess( obj2C)
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/plot.spatialProcess.R')
obj2C<- spatialProcess(s,z,  aRange=.8, profileLambda = TRUE,
gridLambda= 10**seq( -3,0,,50) ,mKrig.args= list( iseed=34,
NtrA=200)
)
plot.spatialProcess( obj2C)
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/plot.spatialProcess.R')
plot.spatialProcess( obj2C)
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/plot.spatialProcess.R')
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/plot.spatialProcess.R')
plot.spatialProcess( obj2C)
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/plot.spatialProcess.R')
plot.spatialProcess( obj2C)
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/plot.spatialProcess.R')
plot.spatialProcess( obj2C)
objTest<- fastTps( s,z, aRange= 1.0)
objTest
objTest<- fastTps( s,z, aRange= 1.0, profileLambda=TRUE)
objTest
objTest$lambda.CI
objTest$lambdaProfile
source('~/Dropbox/Home/Repositories/fields/fieldsBeta/R/spatialProcess.R')
obj3<- spatialProcess(s,z)
obj3$aRangeProfile
names( obj3)
obj3$MLEInfo
